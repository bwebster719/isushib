<?php

/**
 * @file
 * Restricts logins to a list of usernames.
 */

/**
 * Implementation of hook_menu().
 */
function isushibsiteaccess_menu() {
  $items['admin/config/people/isushibsiteaccess'] = array(
    'title' => 'Change who may access this site',
    'description' => 'Edit the list of users who may access the site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('isushibsiteaccess_settings'),
    'access arguments' => array('administer shibboleth site access'),
    'file' => 'isushibsiteaccess.admin.inc',
  );
  $items['admin/config/people/isushibsiteaccess/who'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/people/isushibsiteaccess/config'] = array(
    'title' => 'Assignable Roles',
    'description' => 'Change what appears on the Who Can Access This Site form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('isushibsiteaccess_form_configuration'),
    'access arguments' => array('administer permissions'),
    'file' => 'isushibsiteaccess.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['admin/config/people/isushibsiteaccess/revoke'] = array(
    'title' => 'Delete Users',
    'description' => 'Bulk revoke access to the site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('isushibsiteaccess_form_revoke'),
    'access arguments' => array('revoke shibboleth site access'),
    'file' => 'isushibsiteaccess.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['admin/config/people/isushibsiteaccess/edit'] = array(
    'title' => 'Edit future user roles',
    'description' => 'Change roles that will be assigned to a given future user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('isushibsiteaccess_edit_future_user', 5),
    'access arguments' => array('administer shibboleth future roles'),
    'type' => MENU_CALLBACK,
    'file' => 'isushibsiteaccess.admin.inc',
  );
  $items['admin/config/people/isushibsiteaccess/delete'] = array(
    'description' => 'Delete a given future user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('isushibsiteaccess_user_delete_confirm', 5),
    'access arguments' => array('administer shibboleth site access'),
    'type' => MENU_CALLBACK,
    'file' => 'isushibsiteaccess.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function isushibsiteaccess_permission() {
  return array(
    'administer shibboleth site access' =>  array(
      'title' => t('Administer shibboleth site access'),
      'description' => t('Change which shibboleth-authenticated users have access to this site.'),
      'restrict access' => TRUE,
    ),
    'administer shibboleth future roles' =>  array(
      'title' => t('Administer shibboleth future roles'),
      'description' => t('Assign roles to shibboleth-authenticated users who will log in in the future.'),
      'restrict access' => TRUE,
    ),
  );
}


/**
 * Implements hook_shibboleth_post_register().
 * 
 * Called after shibboleth has created Drupal user.
 */
function isushibsiteaccess_shibboleth_post_register($variables) {
  $name = $variables['shibboleth_user'];
  $fuid = isushibsiteaccess_get_fuid($name);
  
  // Roles have now been assigned to user.
  // User is no longer a future user so future role info can be deleted.
  db_delete('isushibsiteaccess_roles')
    ->condition('fuid', $fuid)
    ->execute();  
}

/**
 * Is a given user on the whitelist?
 *
 * @param  string $name
 * @return boolean
 */
function isushibsiteaccess_is_allowed($name) {
  $fuid = isushibsiteaccess_get_fuid($name);
  return $fuid ? TRUE : FALSE;
}

/**
 * Get roles for a future user given username.
 *
 * @param string $name
 * @return array of rid => role name pairs
 */
function isushibsiteaccess_get_preassigned_roles_for_user($name) {
  $fuid = isushibsiteaccess_get_fuid($name);
  $assigned_roles = isushibsiteaccess_assigned_roles($fuid);
  return $assigned_roles; 
}

/**
 * Get roles for a future user given future user ID.
 *
 * @param integer fuid
 * @return array of rid => role name pairs
 */
function isushibsiteaccess_assigned_roles($fuid) {
  $available_roles = isushibsiteaccess_available_roles();
  $assigned_roles = array();
  // Find existing assigned roles.
  $query = db_select('isushibsiteaccess_roles', 'pr');
  $query->fields('pr', array('fuid', 'rid'));
  $query->condition('fuid', $fuid);
  $result = $query->execute();
    
  $default_values = array();
  foreach ($result as $row) {
    $assigned_roles[$row->rid] = $available_roles[$row->rid];
  }

  return $assigned_roles;
}

/**
 * Return the subset of Drupal roles that are available for
 * assignment to future users.
 *
 * @return array of rid => role name pairs
 */
function isushibsiteaccess_available_roles() {
  $available_roles = array();
  $assignable_roles = variable_get('isushibsiteaccess_assignable_roles', array());
  // Get list of roles, excluding anonymous user role.
  $roles = array_map('check_plain', user_roles(TRUE));
  foreach ($assignable_roles as $rid => $status) {
    if ($status) {
      $available_roles[$rid] = $roles[$rid];
    }
  }
  // Exclude authenticated, since any user will get it.
  unset($available_roles[DRUPAL_AUTHENTICATED_RID]);
  return $available_roles;
}

/**
 * Get future user ID for a username.
 *
 * @param string $name
 * @return integer 
 */
function isushibsiteaccess_get_fuid($name) {
    $query = db_select('isushibsiteaccess_users', 'pu')
    ->fields('pu', array('fuid', 'name'))
    ->condition('name', $name);
  $result = $query->execute();
  $fuid = $result->fetchField(0);

  return $fuid;
}

/**
 * Get future user name for a future user ID.
 *
 * @param int $fuid
 * @return string
 */
function isushibsiteaccess_get_name($fuid) {
  $query = db_select('isushibsiteaccess_users', 'pu')
    ->fields('pu', array('fuid', 'name'))
    ->condition('fuid', $fuid);
  $result = $query->execute();
  $name = $result->fetchField(1);
  
  return $name;
}

/**
 * Add a future user name to the access list.
 *
 * @param string $name
 * @param fully-loaded $user object
 * @param string $module_name
 * @return int - $fuid or 0 if alread in access list
 */
function isushibsiteaccess_add_name_to_list($name, $user, $module_name) {
  // Does the user already exist as a future user?
  $fuid = isushibsiteaccess_get_fuid($name);
  if ($fuid) {
    return (0);
  }

  // Add user record.
  $record = array(
    'name' => $name,
  );
  drupal_write_record('isushibsiteaccess_users', $record);


  // Unblock user if existing account is blocked
  if ($user && ($user->status == 0)) {
    db_update('users')
      ->fields(array('status' => 1))
      ->condition('name', $username, '=')
      ->execute();
    isushibsiteaccess_user_feedback("Unblocked user " . $name, 'success', $module_name);
  }

  return ($record['fuid']);
}

/**
 * Assign role to a future user.
 *
 * @param int $fuid
 * @param int $rid
 */
function isushibsiteaccess_assign_role_to_future_user($fuid, $rid) {
  $record = array(
    'fuid' => $fuid,
    'rid' => $rid,
  );
  drupal_write_record('isushibsiteaccess_roles', $record);
}

/**
 *
 * @param string $name
 * @param int $fuid
 * @param string $module_name
 */
function isushibsiteaccess_revolk_user($name, $fuid, $module_name='isushibsiteaccess') {
  // Does user already exist in Drupal?
  $user = user_load_by_name($name);
  $status = $user ? t('current') : t('future');

  // Delete role records for fuid
  db_delete('isushibsiteaccess_roles')
    ->condition('fuid', $fuid)
    ->execute();
  isushibsiteaccess_user_feedback("Deleted roles for " . $name, 'ok', $module_name);

  // Delete record for fuid
  db_delete('isushibsiteaccess_users')
    ->condition('fuid', $fuid)
    ->execute();

  // Block user if existing account
  if ($user && ($user->status != 0)) {
    db_update('users')
      ->fields(array('status' => 0))
      ->condition('name', $name, '=')
      ->execute();
    isushibsiteaccess_user_feedback("Blocked user " . $name, 'ok', $module_name);
  }

  isushibsiteaccess_user_feedback("Revolked access for " . $status . " user " . $name, 'success', $module_name);
}

/**
 * Give User Feedback on what we're doing
 *
 * @param $message
 * @param $type
 * @param $module_name
 */
function isushibsiteaccess_user_feedback($message, $type, $module_name) {
  if (function_exists('drush_log')) {
    // We're in drush
    drush_log($message, $type);
  }
  else {
    // We're in Drupal, use watchdog
    watchdog($module_name, $message);
  }
}


/**
 * Add a future user name to the access list.
 *
 * @param string $name
 * @param string $module_name
 */
function isushibsiteaccess_add_name_to_list2($name, $vetted_roles, $module_name) {
  // If user_validate_name() returns anything it's a bad sign.
  if (user_validate_name($name)) {
    isushibsiteaccess_user_feedback($name . " is not a valid username", 'error', $module_name);
    return;
  }

  // Does user already exist in Drupal?
  $user = user_load_by_name($name);
  $status = $user ? t('current') : t('future');
  //$user_exists = !empty($user);

  // Does the user already exist as a future user?
  $fuid = isushibsiteaccess_get_fuid($name);
  if ($fuid) {
    if ($module_name == "drush-addusers" || $module_name == "isushibsiteaccess") {
      isushibsiteaccess_user_feedback($status . " user " . $name . " was already on the access list", "warning", $module_name);
    }
  }
  else {
    // Add user record.
    $record = array(
      'name' => $name,
    );
    drupal_write_record('isushibsiteaccess_users', $record);
    isushibsiteaccess_user_feedback("Added " . $status . " user " . $name . " to access list", "success", $module_name);
    $fuid = isushibsiteaccess_get_fuid($name);
  }

  // Check if a user account exists
  if ($user) {
    // Add missing roles to existing user
    foreach ($vetted_roles as $newrole) {
      if ($module_name == "drush-addusers" || $module_name == "isushibsiteaccesssync" || (user_access('administer users') && user_access('administer permissions'))) {
        // If they don't have the roll, add it
        if (!(in_array($newrole, $user->roles))) {
          $role = user_role_load_by_name($newrole);
          user_multiple_role_edit(array($user->uid), 'add_role', $role->rid);
          isushibsiteaccess_user_feedback("Role " . $newrole . " added to current user " . $name, "success", $module_name);
        }
      }
    }

    // Unblock user if existing account is blocked
    if ($user->status == 0) {
      db_update('users')
        ->fields(array('status' => 1))
        ->condition('name', $name, '=')
        ->execute();
      isushibsiteaccess_user_feedback("Unblocked user " . $name, 'success', $module_name);
    }
  }
  else {
    // Handle when it's a future user, ie no user account yet
    $assigned_roles = isushibsiteaccess_fix_arrays(isushibsiteaccess_assigned_roles($fuid));
    foreach ($vetted_roles as $newrole) {
       if (!(in_array($newrole, $assigned_roles))) {
        isushibsiteaccess_assign_role_to_future_user($fuid, array_search($newrole, $vetted_roles));
        isushibsiteaccess_user_feedback("Role " . $newrole . " added to future user " . $name, "success", $module_name);
      }
    }
  }
}


/*
 * Get a list of roles to add the user to
 * 
 * @param string $requested_roles
 * @param string $module_name
 */
function isushibsiteaccess_get_vetted_list_of_roles($requested_roles, $module_name) {
  $return_array = array();

  /* Check for permissions */
  if ($module_name == "drush-addusers" || $module_name == "isushibsiteaccesssync" || user_access('administer shibboleth future roles')) {
    $assignable_roles = isushibsiteaccess_available_roles();
    /* Intersect of three arrays, all user roles are last so the keys should be the role ID */
    $return_array =  array_intersect(isushibsiteaccess_fix_arrays($assignable_roles), isushibsiteaccess_fix_arrays($requested_roles), isushibsiteaccess_fix_arrays(user_roles(TRUE)));
  }
  return $return_array;
}

/* Trim values of array then change to lowercase
 *
 * @param array $array_name
 */
function isushibsiteaccess_fix_arrays($array_name) {
  return (array_map('strtolower', array_map('trim', $array_name)));
}
